generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  name          String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  emailVerified DateTime?
  image         String?
  company       String?
  bio           String?
  accounts      Account[]
  sessions      Session[]
  posts         SocialMediaPost[]
  subscriptions Subscription[]
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  planId    String
  status    SubscriptionStatus
  startDate DateTime           @default(now())
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  plan      Plan               @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  price         Float          @default(0.0)
  duration      Int            @default(30)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  postLimit     Int            @default(5)
  subscriptions Subscription[]
}

model SocialMediaPost {
  id               String   @id @default(uuid())
  platform         Platform
  message          String
  wordLimit        Int
  tone             Tone
  generatedContent String
  createdAt        DateTime @default(now())
  userId           String
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

enum Platform {
  LINKEDIN
  FACEBOOK
  TWITTER
  INSTAGRAM
}

enum Tone {
  PROFESSIONAL
  CASUAL
  HUMOROUS
  INSPIRATIONAL
  EDUCATIONAL
}
