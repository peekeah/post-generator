// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Your existing models with NextAuth compatibility
model User {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String?
  emailVerified DateTime?
  image         String?
  subscription  Subscription? @relation("UserSubscription")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation("UserSubscription", fields: [userId], references: [id])
  userId    String             @unique
  plan      Plan               @relation(fields: [planId], references: [id])
  planId    String
  status    SubscriptionStatus
  startDate DateTime           @default(now())
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique // Plan name (Free, Pro, Business)
  price         Float          @default(0.0) // Monthly price
  duration      Int            @default(30) // Duration in days
  features      String[] // List of features in the plan
  subscriptions Subscription[] // One-to-many relation with Subscription
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model SocialMediaPost {
  id               String   @id @default(uuid()) // Unique ID
  platform         Platform
  message          String   @db.Text() // Original input message
  wordLimit        Int
  tone             Tone
  generatedContent String   @db.Text() // The AI-generated post
  createdAt        DateTime @default(now()) // Timestamp for tracking
}

enum Platform {
  LINKEDIN
  FACEBOOK
  TWITTER
  INSTAGRAM
}

enum Tone {
  PROFESSIONAL
  CASUAL
  HUMOROUS
  INSPIRATIONAL
  EDUCATIONAL
}
